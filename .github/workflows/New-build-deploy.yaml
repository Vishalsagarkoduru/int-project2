name: Build, Push Docker Image and Deploy to AKS - Development

on: 
  push:
    branches:
      - development
  workflow_dispatch:
# env:
#   RESOURCE_GROUP: "BRL-POC-RG-INTEGRATION-NON-PROD"
#   CLUSTER_NAME: "BRL-POC-AKS-INTEGRATION-NON-PRO"
#   REGISTRY_LOGIN_SERVER: "brlcrintegrationnonprod.azurecr.io"
#   REGISTRY_USERNAME: "BRLCRINTEGRATIONNONPROD"
#   NAMESPACE: "development"
#   VERSION: "1.0"
 
jobs: 
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev/stage
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 'Login to ACR'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ vars.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: 'Build and Push Docker Image'
      run: |
        REPO_NAME=$(basename ${{ github.repository }})
        BRANCH_NAME=$(echo ${{ github.ref }} | awk -F/ '{print $3}')
        DATE=$(date +%Y%m%d)
        IMAGE_TAG="${REPO_NAME}-${BRANCH_NAME}-${DATE}-1.0-${GITHUB_SHA::7}"
        IMAGE_TAG=$(echo "$IMAGE_TAG" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
        docker build . -t ${{ vars.REGISTRY_LOGIN_SERVER }}/development:${IMAGE_TAG}
        docker push ${{ vars.REGISTRY_LOGIN_SERVER }}/development:${IMAGE_TAG}
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
      env:
        GITHUB_SHA: ${{ github.sha }}

    # - name: 'Run Trivy vulnerability scanner'
    #   id: trivy-scan
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: ${{ env.REGISTRY_LOGIN_SERVER }}/development:${{ env.IMAGE_TAG }}
    #     format: 'table'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'
        
    # - name: 'Check Trivy Scan Result'
    #   if: steps.trivy-scan.outcome == 'success'
    #   run: echo "Scan Successful"


    - name: 'Checkout Code'
      uses: actions/checkout@v2

    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
  
    - name: 'Set AKS Context'  
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ vars.RESOURCE_GROUP }}
        cluster-name: ${{ vars.CLUSTER_NAME }}
  
    - name: 'Setup kubectl'
      uses: azure/setup-kubectl@v3
  
    - name: Install kubelogin
      run: |
          curl -sSL -o kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.26/kubelogin-linux-amd64.zip
          unzip kubelogin.zip -d kubelogin
          sudo mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin
          rm -rf kubelogin.zip kubelogin
        
    - name: Get AKS credentials
      run: |         
          az aks get-credentials --resource-group ${{ vars.RESOURCE_GROUP }} --name ${{ vars.CLUSTER_NAME }} --overwrite-existing
          kubelogin convert-kubeconfig -l azurecli
    
    - name: Deploy to AKS
      uses: Azure/k8s-deploy@v4
      with:
        manifests: |
          deploy-dev.yaml
        images: '${{ vars.REGISTRY_LOGIN_SERVER }}/development:${{ env.IMAGE_TAG }}'
        namespace: ${{ vars.NAMESPACE_DEVELOPMENT}}
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
